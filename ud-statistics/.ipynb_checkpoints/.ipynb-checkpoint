{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "University of Delaware GPA Distribution by Major\n",
    "==\n",
    "This initial project is an analysis of grade distribution throughout the various colleges, departments, and majors at the University of Delaware, Newark campus. \n",
    "\n",
    "All data sourced from University of Delaware [Office of Institutional Research and Effectiveness](https://ire.udel.edu/). The grade distribution data can be found [here](https://cpb-us-w2.wpmucdn.com/sites.udel.edu/dist/e/2019/files/2017/04/Fall-2016-1ryyj3y.pdf)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: Data Extraction and Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "from tabula import read_pdf\n",
    "import pandas as pd\n",
    "global cols \n",
    "\n",
    "# Checks if there is a lower value than x in the list\n",
    "def findPrevVal(x,lst):\n",
    "    i = x - 1\n",
    "    while not i in lst:\n",
    "        i -= 1\n",
    "        if i < 0:\n",
    "            return -1\n",
    "    return i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read pdf document into dataframe and label relevant columns\n",
    "def readFile(fileloc):\n",
    "    df = read_pdf(fileloc, pages='all')\n",
    "    df.columns = ['College', 'Department','','','','','Total Grades Awarded','Average Grade']\n",
    "    df = df.drop(columns=[''])\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# CLEAN DATA\n",
    "# This function takes in a dataframe with columns ['College', 'Department', 'Total Grades Awarded', 'Average Grade']\n",
    "def clean(df):\n",
    "    # Iterate over every column in the dataframe\n",
    "    for index, row in df.iterrows():\n",
    "        # If the College and Department is empty, the row does not have relevant data in it\n",
    "        if pd.isnull(row['College']) and pd.isnull(row['Department']):\n",
    "            df = df.drop([index])\n",
    "            continue\n",
    "        # If the Total Grades and Average Grade cols are empty, the row should be merged with\n",
    "        # the previous row\n",
    "        elif pd.isnull(row['Total Grades Awarded']) and pd.isnull(row['Average Grade']):\n",
    "            prev = findPrevVal(index, df.index.values)\n",
    "            if prev == -1:\n",
    "                break\n",
    "\n",
    "            cat = [[df.at[prev,cols[0]],df.at[index,cols[0]]],\n",
    "                   [df.at[prev,cols[1]],df.at[index,cols[1]]]]\n",
    "            if type(cat[0][0]) is str and type(cat[0][1]) is str:\n",
    "                df.at[prev,cols[0]]+= \" \" +df.at[index,cols[0]]\n",
    "            if type(cat[1][0]) == type(cat[1][1]):\n",
    "                df.at[prev,cols[1]]+= \" \"+df.at[index,cols[1]]\n",
    "            df = df.drop([index])\n",
    "\n",
    "    # Assign College to each Department\n",
    "    for index, row in df.iterrows():\n",
    "        if pd.isnull(row['College']) and index in df.index.values:\n",
    "            # Find the last named college\n",
    "            i = findPrevVal(index, df.index.values)\n",
    "            while pd.isnull(df.at[i,'College']):\n",
    "                i = findPrevVal(i, df.index.values)\n",
    "            df.at[index, 'College'] = df.at[i,'College']\n",
    "\n",
    "    # Remove Total rows in data\n",
    "    df = df[~df['Department'].str.contains('Total')]\n",
    "\n",
    "    # Convert number grades awarded to int\n",
    "    df[\"Total Grades Awarded\"] = df[\"Total Grades Awarded\"].str.replace(\",\",\"\").apply(pd.to_numeric)\n",
    "    df['Average Grade'] = df['Average Grade'].apply(pd.to_numeric)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\n",
    "# Plot a single dataframe\n",
    "def plotDf(df, year):\n",
    "    # Create figure and axes\n",
    "    fig,ax = plt.subplots(1)\n",
    "    canvas = FigureCanvas(fig)\n",
    "    plt.rcParams['figure.figsize'] = [9.5, 6]\n",
    "    plt.rcParams['figure.dpi']= 150\n",
    "    \n",
    "    # Plot base image\n",
    "    ax.set_xlabel('GPA')\n",
    "    plt.xlim(2.4, 4.0)\n",
    "    plt.suptitle('University of Delaware: GPA by College', y=.95, fontsize=12)\n",
    "    plt.title('%s Fall Semester' %year, fontsize=10)\n",
    "\n",
    "    colleges = sorted(list(set(df['College'])),reverse=True)\n",
    "    colors = [plt.cm.viridis(i) for i in np.linspace(0.8,0,len(colleges))]\n",
    "    pos = [0]\n",
    "    label_pos = []\n",
    "    ylims = [0,0]\n",
    "    height = 50\n",
    "    space = 15\n",
    "    \n",
    "    # Plot all the GPAs for each department in a given college\n",
    "    for i,c in zip(colleges,colors):\n",
    "        grades = np.array(df.loc[df['College'] == i]['Average Grade'])\n",
    "        size = np.array(df.loc[df['College'] == i]['Total Grades Awarded'])\n",
    "        ave = np.average(grades, weights=size)\n",
    "        \n",
    "        if len(grades)>1:\n",
    "            pos = np.linspace(0,height,len(grades)) + ylims[-1] + 2*space\n",
    "            ylims = [pos[0]-space, pos[-1]+space]\n",
    "        else:\n",
    "            pos = [ylims[-1] + 2*space + height/2]\n",
    "            ylims = [pos[0]-space-height/2, pos[0]+space+height/2]\n",
    "        \n",
    "        # Plot the range of the college's GPA\n",
    "        g = sorted(grades)\n",
    "        rect = Rectangle((g[0],ylims[0]),float(g[-1]-g[0]),ylims[-1]-ylims[0],color=c,alpha=0.2)\n",
    "        ax.add_patch(rect)\n",
    "        \n",
    "        # Plot grades with sizes based on total grades awarded\n",
    "        ax.scatter(grades, pos, s=size/15, color=c, alpha=0.5)\n",
    "        \n",
    "        # Plot the average GPA for the college\n",
    "        ax.plot([ave,ave], ylims, linewidth=3, color=c, alpha=0.7)\n",
    "        label_pos+=[ylims[0]+(ylims[-1]-ylims[0])/2]\n",
    "        \n",
    "    # Set the y labels\n",
    "    ax.set_yticks(label_pos)\n",
    "    ax.set_yticklabels(colleges)\n",
    "    \n",
    "    # Add labels to departments with the most grades awarded\n",
    "    if df['Department'].str.contains('Mathematical Sciences').any():\n",
    "        ax.text(df.loc[df['Department'] == 'Mathematical Sciences']['Average Grade'], label_pos[-2], 'MATH',\n",
    "                horizontalalignment='center',\n",
    "                verticalalignment='center',\n",
    "                fontsize='small')\n",
    "    if df['Department'].str.contains('Business Administration').any():\n",
    "        ax.text(df.loc[df['Department'] == 'Business Administration']['Average Grade'], label_pos[-3], 'BUAD',\n",
    "                horizontalalignment='center',\n",
    "                verticalalignment='top',\n",
    "                fontsize='small')\n",
    "    if df['Department'].str.contains('Economics').any():\n",
    "        ax.text(df.loc[df['Department'] == 'Economics']['Average Grade'], label_pos[-3], 'ECON',\n",
    "                horizontalalignment='center',\n",
    "                verticalalignment='center',\n",
    "                fontsize='small')\n",
    "    if df['Department'].str.contains('Behavioral Health & Nutrition').any():\n",
    "        ax.text(df.loc[df['Department'] == 'Behavioral Health & Nutrition']['Average Grade'], label_pos[1], 'BHAN',\n",
    "               horizontalalignment='center',\n",
    "               verticalalignment='top',\n",
    "               fontsize='small')\n",
    "    if df['Department'].str.contains('Mechanical Engineering').any():\n",
    "        ax.text(df.loc[df['Department'] == 'Mechanical Engineering']['Average Grade'], label_pos[2], 'MECH',\n",
    "                horizontalalignment='center',\n",
    "                verticalalignment='bottom',\n",
    "                fontsize='small')       \n",
    "    \n",
    "    # draw the canvas, cache the renderer\n",
    "    fig.canvas.draw()\n",
    "    image = np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8')\n",
    "    image  = image.reshape(fig.canvas.get_width_height()[::-1] + (3,))\n",
    "    return image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.patches import Rectangle\n",
    "import numpy as np\n",
    "import imageio\n",
    "\n",
    "cols = ['College','Department','Total Grades Awarded','Average Grade']\n",
    "\n",
    "# Read and clean all files in the given year range\n",
    "years = range(1999,2016+1)\n",
    "files = ['Grades/Fall-%d-Grades.pdf'%n for n in years]\n",
    "df_list = [clean(df) for df in [readFile(f) for f in files]]\n",
    "\n",
    "kwargs_write = {'fps':2, 'quantizer':'nq'}\n",
    "imageio.mimsave('./UD_GPA_Analysis.gif', [plotDf(df,year) for df, year in zip(df_list,years)], fps=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
